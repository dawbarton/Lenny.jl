module EmbeddedFunctions

#--- Dependencies

import Base: resize!

#--- Exports

# Exported types
export StateVar, ZeroFunction, MonitorFunction, ClosedEmbeddedFunctions

# Exported functions
export getu, getu!, setu!, getmu, getmu!, setmu!, getvars, getvars!,
    setvars!, muidx, active, active!, dim_u, dim_mu, dim_phi, dim_psi,
    mu_idx, mu_name, eval_efuncs!, eval_mfuncs!

#--- State variables

struct StateVar{T <: Number}
    name::String  # name of the state variable
    u::Vector{T}  # initial state (may be changed during continuation)
    t::Vector{T}  # initial tangent (may be changed during continuation)
end
StateVar(name::String, u::Vector{T}) where {T <: Number} = StateVar(name, u, Vector{T}())

#--- Zero functions (otherwise known as zero problems)

struct ZeroFunction{T <: Number, F}
    f::F  # underlying function
    u::Vector{StateVar{T}}  # underlying state variables
    res::Vector{T}  # output vector
end
ZeroFunction(f, u::Vector{StateVar{T}}, m::Integer) where T <: Number = ZeroFunction(f, u, Vector{T}(undef, m))

#--- Monitor functions

struct MonitorFunction{T <: Number, F}
    f::F  #underlying function
    u::Vector{StateVar{T}}  # underlying state variables
    Œº_name::String  # name of the continuation parameter
    active::Bool  # whether the continuation parameter is active initially
end

#--- Closed functions (for computational speed)

const SimpleView{T} = SubArray{T, 1, Array{T, 1}, Tuple{UnitRange{Int}}, true} where T

struct ClosedEmbeddedFunctions{T <: Number,
                               F <: Tuple,
                               FU <: Tuple,
                               G <: Tuple,
                               GU <: Tuple}
    u::Vector{StateVar{T}}
    u·µ¢::Vector{Tuple{Int, Int}}
    u·µ•::Vector{SimpleView{T}}  # view cache; should be same size as u
    Œ¶::F
    Œ¶·µ§::FU
    Œ¶·µ¢::Vector{Tuple{Int, Int}}
    Œº::Vector{T}
    Œº·µ¢::Vector{Int}
    Œº‚Çõ::Dict{String, Int}
    ùïÅ::Vector{Bool}  # ùïÅ denotes active continuation parameters (i.e., continuation parameters that vary)
    Œ®::G
    Œ®·µ§::GU
    Œ®·µ¢::Vector{Int}
end

"""
    ClosedEmbeddedFunctions(Œ¶::Vector{ZeroFunction}, Œ®::Vector{MonitorFunction})

A ClosedEmbeddedFunctions structure is an optimised structure that allows fast
execution of the embedded zero and monitor functions within the problem,
avoiding dynamic dispatch.

This function generates a ClosedEmbeddedFunctions structure from a vector of
zero functions and a vector of monitor functions. Any state variables referenced
will be automatically included in the closed problem.
"""
function ClosedEmbeddedFunctions(Œ¶::Vector{<: ZeroFunction{T}}, Œ®::Vector{<: MonitorFunction{T}}) where T <: Number
    # Check for uniqueness
    if !allunique(Œ¶)
        throw(ArgumentError("Some zero functions are included multiple times"))
    end
    if !allunique(Œ®)
        throw(ArgumentError("Some monitor functions are included multiple times"))
    end
    # Get the necessary state variables
    u = Vector{StateVar{T}}()
    Œ¶·µ§ = []  # a vector of tuples of different lengths
    for œï in Œ¶
        œï·µ§ = Int[]
        for uu in œï.u
            if !(uu in u)
                push!(u, uu)
            end
            push!(œï·µ§, findfirst(isequal(uu), u))
        end
        push!(Œ¶·µ§, (œï·µ§...,))
    end
    Œ¶·µ¢ = Vector{Tuple{Int, Int}}(undef, length(Œ¶))
    Œ®·µ§ = []  # a vector of tuples of different lengths so needs to be Any
    ùïÅ = Bool[]
    Œº‚Çõ = Dict{String, Int}()
    for i = eachindex(Œ®)
        œà = Œ®[i]
        œà·µ§ = Int[]
        for uu in œà.u
            if !(uu in u)
                push!(u, uu)
            end
            push!(œà·µ§, findfirst(isequal(uu), u))
        end
        push!(ùïÅ, œà.active)
        push!(Œ®·µ§, (œà·µ§...,))
        push!(Œº‚Çõ, œà.Œº_name => i)
    end
    Œ®·µ¢ = Vector{Int}(undef, length(Œ®))
    u·µ¢ = Vector{Tuple{Int, Int}}(undef, length(u))
    u·µ• = Vector{SimpleView{T}}(undef, length(u))
    Œº = Vector{T}(undef, length(Œ®))
    Œº·µ¢ = Vector{Int}(undef, length(Œº))
    closed = ClosedEmbeddedFunctions(u, u·µ¢, u·µ•, (Œ¶...,), (Œ¶·µ§...,), Œ¶·µ¢, Œº, Œº·µ¢, Œº‚Çõ, ùïÅ, (Œ®...,), (Œ®·µ§...,), Œ®·µ¢)
    resize!(closed)
end

"""
    resize!(closed::ClosedEmbeddedFunctions)

Update the indices within `closed` to reflect changes in the sizes of the
underlying state variables and the dimensions of the zero functions.
"""
function resize!(closed::ClosedEmbeddedFunctions)
    # State variables
    idx = 1
    for i = eachindex(closed.u)
        n = length(closed.u[i].u)
        closed.u·µ¢[i] = (idx, idx + n - 1)
        idx += n
    end
    # Continuation parameters
    for i = eachindex(closed.Œº)
        if closed.ùïÅ[i]
            closed.Œº·µ¢[i] = idx
            idx += 1
        else
            closed.Œº·µ¢[i] = 0
        end
    end
    # Zero and monitor functions
    idx = 1
    for i = eachindex(closed.Œ¶)
        m = length(closed.Œ¶[i].res)
        closed.Œ¶·µ¢[i] = (idx, idx + m - 1)
        idx += m
    end
    for i = eachindex(closed.Œ®)
        closed.Œ®·µ¢[i] = idx
        idx += 1
    end
    closed
end

@generated function eval_efuncs!(
        res::AbstractVector{T},
        closed::ClosedEmbeddedFunctions{T, F, FU, G, GU},
        prob,
        u::AbstractVector{T}
        ) where {T <: Number, F, FU, G, GU}
    body = quote
        # Views on the state variables get reused, so precompute them
        for i = eachindex(closed.u·µ¢)
            (i0, i1) = closed.u·µ¢[i]
            closed.u·µ•[i] = view(u, i0:i1)
        end
        # Copy any active continuation parameter values into the Œº variable
        for i = eachindex(closed.Œº)
            if closed.ùïÅ[i]
                closed.Œº[i] = u[closed.Œº·µ¢[i]]
            end
        end
    end
    for i in eachindex(FU.parameters)
        # Construct function calls of the form Œ¶[i](res·µ•[i], u·µ•[Œ¶·µ§[i][1]], ..., u·µ•[Œ¶·µ§[i][n]])
        if length(FU.parameters[i].parameters) == 0
            # No dependencies means pass everything
            push!(body.args, :(closed.Œ¶[$i].f(view(res, closed.Œ¶·µ¢[$i][1]:closed.Œ¶·µ¢[$i][2]), prob, u)))
        else
            push!(body.args, :(closed.Œ¶[$i].f(view(res, closed.Œ¶·µ¢[$i][1]:closed.Œ¶·µ¢[$i][2]), prob, $((:(closed.u·µ•[closed.Œ¶·µ§[$i][$j]]) for j in eachindex(FU.parameters[i].parameters))...))))
        end
    end
    for i in eachindex(GU.parameters)
        # Construct function calls of the form res[Œ®·µ¢[i]] = Œ®[i](u·µ•[Œ®·µ§[i][1]], ..., u·µ•[Œ®·µ§[i][n]]) - Œº[i]
        # Uses the return value of Œ® in contrast to Œ¶ since it is assumed to be ‚Ñù rather than ‚Ñù‚Åø
        if length(GU.parameters[i].parameters) == 0
            # No dependencies means pass everything
            push!(body.args, :(res[closed.Œ®·µ¢[$i]] = closed.Œ®[$i].f(prob, u) - closed.Œº[$i]))
        else
            push!(body.args, :(res[closed.Œ®·µ¢[$i]] = closed.Œ®[$i].f(prob, $((:(closed.u·µ•[closed.Œ®·µ§[$i][$j]]) for j in eachindex(GU.parameters[i].parameters))...)) - closed.Œº[$i]))
        end
    end
    push!(body.args, :res)
    body
end

@generated function eval_mfuncs!(
        res::AbstractVector{T},
        closed::ClosedEmbeddedFunctions{T, F, FU, G, GU},
        prob,
        u::AbstractVector{T}
        ) where {T <: Number, F, FU, G, GU}
    body = quote
        # Views on the state variables get reused, so precompute them
        for i = eachindex(closed.u·µ¢)
            (i0, i1) = closed.u·µ¢[i]
            closed.u·µ•[i] = view(u, i0:i1)
        end
    end
    for i in eachindex(GU.parameters)
        # Construct function calls of the form res[i] = Œ®[i](u·µ•[Œ®·µ§[i][1]], ..., u·µ•[Œ®·µ§[i][n]])
        # Uses the return value of Œ® in contrast to Œ¶ since it is assumed to be ‚Ñù rather than ‚Ñù‚Åø
        if length(GU.parameters[i].parameters) == 0
            # No dependencies means pass everything
            push!(body.args, :(res[$i] = closed.Œ®[$i].f(prob, u)))
        else
            push!(body.args, :(res[$i] = closed.Œ®[$i].f(prob, $((:(closed.u·µ•[closed.Œ®·µ§[$i][$j]]) for j in eachindex(GU.parameters[i].parameters))...))))
        end
    end
    push!(body.args, :res)
    body
end

"""
    mu_idx(closed::ClosedEmbeddedFunctions, Œº::String)

Return the index in the continuation parameter vector of the specified
continuation parameter `Œº`.
"""
mu_idx(closed::ClosedEmbeddedFunctions, Œº::String) = closed.Œº‚Çõ[Œº]
mu_idx(closed::ClosedEmbeddedFunctions, Œº::Integer) = Œº

"""
    mu_name(closed::ClosedEmbeddedFunctions, Œº::Integer)

Return the name of the specified continuation parameter `Œº`.
"""
mu_name(closed::ClosedEmbeddedFunctions, Œº::Integer) = closed.Œ®[Œº].Œº_name

"""
    active(closed::ClosedEmbeddedFunctions)

Return the number of active continuation parameters.
"""
active(closed::ClosedEmbeddedFunctions) = sum(closed.ùïÅ)

"""
    active(closed::ClosedEmbeddedFunctions, Œº)

Return whether the specified continuation parameter `Œº` is active or not.
"""
active(closed::ClosedEmbeddedFunctions, Œº) = closed.ùïÅ[muidx(closed, Œº)]

"""
    active!(closed::ClosedEmbeddedFunctions, Œº, active::Bool)

Set the specified continuation parameter `Œº` to be active or not.
"""
active!(closed::ClosedEmbeddedFunctions, Œº, active::Bool) = (closed.ùïÅ[muidx(closed, Œº)] = active)

"""
    dim_u(closed::ClosedEmbeddedFunctions)

Return the total number of state variables.
"""
dim_u(closed::ClosedEmbeddedFunctions) = closed.u·µ¢[end][end]

"""
    dim_mu(closed::ClosedEmbeddedFunctions)

Return the total number of continuation parameters.
"""
dim_mu(closed::ClosedEmbeddedFunctions) = length(closed.Œº)

"""
    dim_phi(closed::ClosedEmbeddedFunctions)

Return the number of output dimensions of the set of zero functions.
"""
dim_phi(closed::ClosedEmbeddedFunctions) = closed.Œ¶·µ¢[end][end]

"""
    dim_psi(closed::ClosedEmbeddedFunctions)

Return the number of output dimensions of the set of monitor functions.
"""
dim_psi(closed::ClosedEmbeddedFunctions) = length(closed.Œ®)

function getu!(u::AbstractVector{T}, closed::ClosedEmbeddedFunctions{T}) where T <: Number
    for i = eachindex(closed.u)
        u[closed.u·µ¢[i][1]:closed.u·µ¢[i][2]] .= closed.u[i].u
    end
    u
end
getu(closed::ClosedEmbeddedFunctions{T}) where {T <: Number} = getu!(zeros(T, dim_u(closed)), closed)

function setu!(closed::ClosedEmbeddedFunctions{T}, u::AbstractVector{T}) where T <: Number
    for i = eachindex(closed.u)
        closed.u[i].u .= u[closed.u·µ¢[i][1]:closed.u·µ¢[i][2]]
    end
end

function getmu!(Œº::AbstractVector{T}, closed::ClosedEmbeddedFunctions{T}; mu=:all) where T <: Number
    if mu == :all
        Œº .= closed.Œº
    elseif mu == :active
        i = 1
        for j = eachindex(closed.Œº)
            if closed.ùïÅ[j]
                Œº[i] = closed.Œº[j]
                i += 1
            end
        end
    elseif mu == :inactive
        i = 1
        for j = eachindex(closed.Œº)
            if !closed.ùïÅ[j]
                Œº[i] = closed.Œº[j]
                i += 1
            end
        end
    else
        throw(ArgumentError("Invalid option for mu; valid options are :all, :active, and :inactive"))
    end
    Œº
end

function getmu(closed::ClosedEmbeddedFunctions{T}; mu=:all) where T <: Number
    if mu == :all
        return getmu!(zeros(T, length(closed.Œº)), closed)
    elseif mu == :active
        return getmu!(zeros(T, sum(closed.ùïÅ)), closed)
    elseif mu == :inactive
        return getmu!(zeros(T, sum(.!closed.ùïÅ)), closed)
    else
        throw(ArgumentError("Invalid option for mu; valid options are :all, :active, and :inactive"))
    end
end

function setmu!(closed::ClosedEmbeddedFunctions{T}, Œº::AbstractVector{T}; mu=:all) where T <: Number
    if mu == :all
        closed.Œº .= Œº
    elseif mu == :active
        i = 1
        for j = eachindex(closed.Œº)
            if closed.ùïÅ[j]
                closed.Œº[j] = Œº[i]
                i += 1
            end
        end
        if i != length(Œº) + 1
            throw(DimensionMismatch("Œº is the wrong size"))
        end
    elseif mu == :inactive
        i = 1
        for j = eachindex(closed.Œº)
            if !closed.ùïÅ[j]
                closed.Œº[j] = Œº[i]
                i += 1
            end
        end
        if i != length(Œº) + 1
            throw(DimensionMismatch("Œº is the wrong size"))
        end
    else
        throw(ArgumentError("Invalid option for mu; valid options are :all, :active, and :inactive"))
    end
    Œº
end

function getvars!(v::AbstractVector{T}, closed::ClosedEmbeddedFunctions{T}) where T <: Number
    for i = eachindex(closed.u)
        v[closed.u·µ¢[i][1]:closed.u·µ¢[i][2]] .= closed.u[i].u
    end
    for i = eachindex(closed.Œº)
        if closed.ùïÅ[i]
            v[closed.Œº·µ¢[i]] = closed.Œº[i]
        end
    end
    v
end

function getvars(closed::ClosedEmbeddedFunctions{T}) where T <: Number
    getvars!(zeros(T, closed.u·µ¢[end][end] + sum(closed.ùïÅ)), closed)
end

function setvars!(closed::ClosedEmbeddedFunctions{T}, v::AbstractVector{T}) where T <: Number
    for i = eachindex(closed.u)
        closed.u[i].u .= v[closed.u·µ¢[i][1]:closed.u·µ¢[i][2]]
    end
    for i = eachindex(closed.Œº)
        if closed.ùïÅ[i]
            closed.Œº[i] = v[closed.Œº·µ¢[i]]
        end
    end
    v
end

end  # module
